<template>
  <div>
    <!-- Controls -->
    <div class="controls flex items-center gap-4 py-4">
      <input type="file" @change="onFileChange" accept="application/pdf" />
      <button @click="prevPage">Previous</button>
      <button @click="nextPage">Next</button>
      <span>Page: {{ pageNum }} / {{ pageCount }}</span>
    </div>

    <!-- PDF Viewer -->
    <div id="pdf-container" class="border overflow-auto max-h-[80vh]">
      <canvas ref="canvasRef"></canvas>
    </div>
  </div>
</template>

<script lang="ts" setup>
  import { ref } from "vue"
  import * as pdfjsLib from "pdfjs-dist"

  const canvasRef = ref<HTMLCanvasElement | null>(null)

  const pdfDoc = ref<any>(null)
  const pageNum = ref(1)
  const pageCount = ref(1)
  const scale = 1.5
  let pageRendering = false
  let pageNumPending: number | null = null

  const renderPage = (num: number) => {
    pageRendering = true

    pdfDoc.value.getPage(num).then((page: any) => {
      const viewport = page.getViewport({ scale })
      const canvas = canvasRef.value
      const context = canvas?.getContext("2d")

      if (canvas && context) {
        canvas.height = viewport.height
        canvas.width = viewport.width

        const renderContext = {
          canvasContext: context,
          viewport: viewport,
        }

        const renderTask = page.render(renderContext)
        renderTask.promise.then(() => {
          pageRendering = false
          if (pageNumPending !== null) {
            renderPage(pageNumPending)
            pageNumPending = null
          }
        })
      }
    })
  }

  const queueRenderPage = (num: number) => {
    if (pageRendering) {
      pageNumPending = num
    } else {
      renderPage(num)
    }
  }

  const nextPage = () => {
    if (pageNum.value >= pageCount.value) return
    pageNum.value++
    queueRenderPage(pageNum.value)
  }

  const prevPage = () => {
    if (pageNum.value <= 1) return
    pageNum.value--
    queueRenderPage(pageNum.value)
  }

  const onFileChange = (e: Event) => {
    const file = (e.target as HTMLInputElement).files?.[0]
    if (!file || file.type !== "application/pdf") return

    const reader = new FileReader()
    reader.onload = function () {
      const typedArray = new Uint8Array(this.result as ArrayBuffer)
      pdfjsLib.getDocument(typedArray).promise.then((pdf: any) => {
        pdfDoc.value = pdf
        pageCount.value = pdf.numPages
        pageNum.value = 1
        renderPage(pageNum.value)
      })
    }
    reader.readAsArrayBuffer(file)
  }
</script>

<style scoped>
  #pdf-container canvas {
    display: block;
    margin: 0 auto;
  }
</style>
